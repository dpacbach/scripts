#!/usr/bin/env python3
import argparse
import os
import shutil
import subprocess as sp

cmake_bool = lambda b: 'ON' if b else 'OFF'

# Get terminal columns with fallback values.
(COLUMNS, _) = shutil.get_terminal_size( (80,20) )
COLUMNS_HALF = COLUMNS // 2

class bcolors:
    HEADER    = '\033[95m'
    OKBLUE    = '\033[94m'
    OKGREEN   = '\033[92m'
    WARNING   = '\033[93m'
    FAIL      = '\033[91m'
    ENDC      = '\033[0m'
    BOLD      = '\033[1m'
    UNDERLINE = '\033[4m'

# Takes a string and embeds it in a long bar of =======
def in_bar( s ):
    res = ''
    res_no_color = '' # need this to take string length
    if s:
        res = bcolors.HEADER + '===== ' + bcolors.OKBLUE + s + bcolors.ENDC + ' '
        res_no_color = '===== ' + s + ' '
    return res + bcolors.HEADER + '='*(COLUMNS_HALF - len( res_no_color )) + bcolors.ENDC

def log( s ):
    if args.verbose:
        print( s )

def log_title( s ):
    if args.verbose:
        log( in_bar( s ) )
    else:
        total = COLUMNS-1
        clean = ' '*(total-len( s ))
        back = '\b'*total
        print( '%s%s%s' % (s, clean, back), end='', flush=True )

def default_compiler():
    cxx = shutil.which( 'c++' )
    if not cxx:
        return ('none', 'none')
    cxx = os.path.realpath( cxx )
    log( 'Found default compiler: %s' % cxx )
    if 'clang' in cxx:
        return ('clang', cxx)
    if 'g++' in cxx:
        return ('gcc', cxx)
    return ('unrecognized', cxx)

def get_compiler_version( path ):
    res = sp.run([path, '-dumpversion'], stdout=sp.PIPE)
    res = res.stdout.strip().decode('ascii')
    log( 'Found compiler version: %s' % res )
    assert(len( res ) < 20)
    return res

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Configure CMake Build' )

    parser.add_argument( '--type',
                         dest='build_type',
                         type=str,
                         default='debug',
                         choices=['debug', 'release'],
                         help='Set the build configuration' )
    parser.add_argument( '-t', '--tidy',
                         dest='tidy',
                         action='store_true',
                         help='Whether to run clang-tidy' )
    parser.add_argument( '--generator',
                         dest='generator',
                         type=str,
                         default=None,
                         choices=['ninja', 'make'],
                         help='Choose the generator' )
    # parser.add_argument( '--iwyu',
    #                      dest='iwyu',
    #                      action='store_true',
    #                      help='Whether to run include-what-you-use' )
    parser.add_argument( '-v', '--verbose',
                         dest='verbose',
                         action='store_true',
                         help='Display verbose output from configure script itself' )
    parser.add_argument( '--testing',
                         dest='testing',
                         action='store_true',
                         help='Build tests and enable testing' )
    parser.add_argument( '--asan',
                         dest='asan',
                         action='store_true',
                         help='Enable address sanitizer instrumentation' )
    parser.add_argument( '--show-commands',
                         dest='show_commands',
                         action='store_true',
                         help='Show full commands during build' )
    parser.add_argument( '--clang',
                         dest='clang',
                         action='store_true',
                         help='Use clang' )
    parser.add_argument( '--libcxx',
                         dest='libcxx',
                         action='store_true',
                         help='Use clang\'s libc++ if it is not already the default on the system.' )
    parser.add_argument( '--gcc',
                         dest='gcc',
                         const='current',
                         default=None,
                         action='store',
                         nargs='?',
                         type=str,
                         help='Use gcc and optionally specify path to g++' )
    parser.add_argument( '--includes',
                         dest='includes',
                         default=None,
                         type=str,
                         help='Specify ;-separated list of standard library include folders' )
    parser.add_argument( '--stdlibs',
                         dest='stdlibs',
                         default=None,
                         type=str,
                         help='Specify ;-separated list of standard libraries to link against' )
    parser.add_argument( '--gui',
                         dest='gui',
                         action='store_true',
                         help='Use CMake GUI' )
    parser.add_argument( '--prefix',
                         dest='prefix',
                         type=str,
                         default=os.path.join( os.environ['HOME'], '.local' ),
                         help='Install prefix' )

    args = parser.parse_args()

    log_title( "initialization" )

    # root_dir = os.path.abspath( os.path.join( os.path.dirname( __file__ ), '..' ) )
    assert os.path.exists( 'CMakeLists.txt' ),\
            'This must be run in a folder with CMakeLists.txt'

    root_dir = os.getcwd()
    log( 'Changing to root directory: ' + root_dir )
    os.chdir( root_dir )

    if not os.path.isdir( '.builds' ):
        log( 'Creating .builds directory' )
        os.mkdir( '.builds' )
    log( 'Changing to .builds directory' )
    os.chdir( '.builds' )

    if args.libcxx:
        assert args.clang, 'Must use --clang if using --libcxx'

    assert not (args.clang and args.gcc),\
           'Cannot specify both --clang and --gcc'

    log( 'args.gcc: %s' % args.gcc )

    compiler_root = None # may not be needed

    if args.clang:
        compiler = 'clang'
        compiler_path = '%s/dev/tools/llvm-current/bin/clang++' % os.environ['HOME']
        compiler_root = '%s/dev/tools/llvm-current' % os.environ['HOME']
    elif args.gcc is not None:
        compiler = 'gcc'
        assert args.gcc, 'gcc cannot be empty!'
        if args.gcc == 'current':
            compiler_path = '%s/dev/tools/gcc-current/bin/g++' % os.environ['HOME']
            compiler_root = '%s/dev/tools/gcc-current' % os.environ['HOME']
        else:
            compiler_root = os.path.dirname( os.path.dirname( args.gcc ) )
            compiler_path = '%s' % args.gcc
    else:
        name, path = default_compiler()
        compiler = 'sys-%s' % name
        compiler_path = path

    log( 'compiler_root: %s' % compiler_root )

    compiler_version = get_compiler_version( compiler_path )

    compiler_includes = args.includes
    # if not compiler_includes:
    #     if args.gcc and args.gcc != 'current':
    #         compiler_includes = '%s/include/c++/%s' % (compiler_root, compiler_version)

    log( 'compiler_includes: %s' % compiler_includes )

    generator = None

    if args.generator:
        generator = args.generator
    else:
        generator = 'make'

    log( 'Using generator: %s' % generator )

    if generator == 'ninja':
        G = 'Ninja'
        gen_label = 'ninja'
    elif generator == 'make':
        G = 'Unix Makefiles'
        gen_label = 'make'
    else:
        raise Exception( 'invalid generator: %s' % generator )

    build_dir = '%s-%s-%s%s%s-%s%s' % (
                    compiler,
                    compiler_version,
                    'libc++-' if args.libcxx else '',
                    args.build_type,
                    '-tidy' if args.tidy else '',
                    'asan-' if args.asan else '',
                    gen_label
                )

    if os.path.exists( 'current' ):
        os.remove( 'current' )

    if not os.path.isdir( build_dir ):
        log( 'Creating "%s" directory' % build_dir )
        os.mkdir( build_dir )
    log( 'Changing to "%s" directory' % build_dir )
    os.chdir( build_dir )

    if os.path.exists( 'CMakeCache.txt' ):
        log( 'Removing CMakeCache.txt' )
        os.remove( 'CMakeCache.txt' )

    build_type = { 'debug': 'Debug', 'release': 'Release' }[args.build_type]
    log( 'Deduced CMake build type: ' + build_type )

    cmake_args = []
    cmake_args.append( '-G%s' % G )
    # cmake_args.append( '--warn-uninitialized' ) # third-party libs are bad with this
    cmake_args.append( '-DCMAKE_BUILD_TYPE=%s' % build_type )
    cmake_args.append( '-DUSE_CLANG_TIDY=%s' % cmake_bool( args.tidy ) )
    # cmake_args.append( '-DUSE_IWYU=%s' % cmake_bool( args.iwyu ) )
    cmake_args.append( '-DCMAKE_INSTALL_PREFIX=%s' % args.prefix )
    cmake_args.append( '-DCMAKE_CXX_COMPILER=%s' % compiler_path )
    if args.testing:
        cmake_args.append( '-DBUILD_TESTING=ON' )
    if compiler_includes:
        cmake_args.append( '-DCMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES=%s' % compiler_includes )
    if args.stdlibs:
        cmake_args.append( '-DCMAKE_CXX_STANDARD_LIBRARIES=%s' % args.stdlibs )
    if gen_label == 'make':
        cmake_args.append( '-DCMAKE_TARGET_MESSAGES=OFF' )
    if args.show_commands:
        cmake_args.append( '-DCMAKE_VERBOSE_MAKEFILE=ON' )
    if args.asan:
        cmake_args.append( '-DENABLE_ADDRESS_SANITIZER=ON' )
    if args.libcxx:
        cmake_args.append( '-DUSE_LIBCXX=ON' )
        llvm_current = '%s/dev/tools/llvm-current' % os.environ['HOME']
        # See: https://libcxx.llvm.org/docs/UsingLibcxx.html
        cmake_args.append( '-DCMAKE_CXX_FLAGS_INIT=-stdlib=libc++ -I%(llvm_current)s/include/c++/v1' % locals() )
        cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS_INIT=-stdlib=libc++ -lc++abi -L%(llvm_current)s/lib -Wl,-rpath,%(llvm_current)s/lib' % locals() )

    exe = 'ccmake' if args.gui else 'cmake'
    cmd = [exe, '../..'] + cmake_args

    log_title( "cmake command" )
    log( ' '.join( cmd[:2] ) )
    for arg in cmd[2:]:
        log( '     ' + arg )

    log_title( 'configuring...' )
    if args.verbose:
        p = sp.Popen( cmd )
    else:
        with open( 'cmake-stdout.log', 'w' ) as f:
            p = sp.Popen( cmd, stdout=f )
    p.communicate()

    if p.returncode != 0:
        log_title( 'errors!' )
        # Use print here because we want this message to appear
        # even in non-verbose mode.
        print( 'Error while running CMake: for CMake\'s stdout see:\n\n    %s\n\nor rerun this script with -v.' % os.path.abspath( 'cmake-stdout.log' ) )

    os.chdir( root_dir )
    if p.returncode == 0:
        if os.path.exists( '.builds/current' ):
            os.remove( '.builds/current' )
        os.symlink( build_dir, '.builds/current', target_is_directory=True )
        log_title( 'finished' )

    exit( p.returncode )
