#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess as sp

from glob import glob

cmake_bool = lambda b: 'ON' if b else 'OFF'

# Get terminal columns with fallback values.
(COLUMNS, _) = shutil.get_terminal_size( (80,20) )
COLUMNS_HALF = COLUMNS // 2

class BColors( object ):
    def __init__( self ):
        self.PURPLE    = '\033[95m'
        self.BLUE      = '\033[94m'
        self.GREEN     = '\033[92m'
        self.YELLOW    = '\033[93m'
        self.RED       = '\033[91m'
        self.NORMAL    = '\033[0m'
        self.BOLD      = '\033[1m'
        self.UNDERLINE = '\033[4m'

bcolors = BColors()

is_linux = (os.uname()[0] == 'Linux')
is_osx   = (os.uname()[0] == 'Darwin')

assert is_linux or is_osx, 'Must be either Linux of OSX'

# Takes a string and embeds it in a long bar of =======
def in_bar( s ):
    res = ''
    res_no_color = '' # need this to take string length
    if s:
        res = bcolors.PURPLE + '===== ' + bcolors.BLUE + s + bcolors.NORMAL + ' '
        res_no_color = '===== ' + s + ' '
    return res + bcolors.PURPLE + '='*(COLUMNS_HALF - len( res_no_color )) + bcolors.NORMAL

def log( s ):
    if args.verbose:
        print( s )

def log_title( s ):
    if args.emit_only:
        return
    if args.verbose:
        log( in_bar( s ) )
    else:
        total = COLUMNS-1
        clean = ' '*(total-len( s ))
        back = '\b'*total
        print( '%s%s%s' % (s, clean, back), end='', flush=True )

def default_c_compiler():
    cc = shutil.which( 'cc' )
    if not cc:
        return ('none', 'none')
    cc = os.path.realpath( cc )
    log( 'Found default C compiler: %s' % cc )
    if 'clang' in cc:
        return ('clang', cc)
    if 'gcc' in cc:
        return ('gcc', cc)
    return ('unrecognized', cc)

def default_cxx_compiler():
    cxx = shutil.which( 'c++' )
    if not cxx:
        return ('none', 'none')
    cxx = os.path.realpath( cxx )
    log( 'Found default C++ compiler: %s' % cxx )
    if 'clang' in cxx:
        return ('clang', cxx)
    if 'g++' in cxx:
        return ('gcc', cxx)
    return ('unrecognized', cxx)

def get_compiler_version( path ):
    res = sp.run([path, '-dumpversion'], stdout=sp.PIPE)
    res = res.stdout.strip().decode('ascii')
    log( 'Found compiler version: %s' % res )
    assert(len( res ) < 20)
    return res

def platform_identifier( *args, **params ):
    chain = []

    chain.append( params['compiler'] )
    chain.append( params['compiler_version'] )

    if params['lld']:
        chain.append( 'lld' )

    if params['lto']:
        chain.append( 'lto' )

    if params['stdlib']:
        chain.append( params['stdlib'] )

    chain.append( params['build_type'] )

    if params['tidy']:
        chain.append( 'tidy' )

    if params['asan']:
        chain.append( 'asan' )

    if params['trace']:
        chain.append( 'trace' )

    return '-'.join( chain )

def do_st():
    build_dir = os.path.basename( os.path.realpath( '.builds/current' ) )
    if build_dir == 'current':
        return 1
    print( 'configuration: %s%s%s%s'
                % (bcolors.BOLD, bcolors.GREEN, build_dir, bcolors.NORMAL) )
    return 0

def get_all_builds():
    build_dir = os.path.basename( os.path.realpath( '.builds' ) )
    if not os.path.exists( build_dir ):
      return None, []
    cur_dir = os.path.basename( os.path.realpath( '.builds/current' ) )
    if cur_dir == 'current':
      cur_dir = None
    builds = list(filter( lambda f: f != 'current', os.listdir( '.builds' ) ))
    return cur_dir, builds

def do_ls():
    cur_build, builds = get_all_builds()
    for b in builds:
      if b == cur_build:
        print( '%sconfiguration%s: >>%s%s%s%s<<'
                    % (bcolors.BOLD, bcolors.NORMAL, bcolors.BOLD, bcolors.GREEN, b, bcolors.NORMAL) )
      else:
        print( 'configuration:   %s%s%s'
                    % (bcolors.GREEN, b, bcolors.NORMAL) )
    return 0

def do_sel():
    cur_build, builds = get_all_builds()
    if not builds:
      return 1
    builds = [b if not b == cur_build else b+' (current)' for b in builds]
    cmd = ['fzf']
    p = sp.Popen( cmd, stdin=sp.PIPE, stdout=sp.PIPE )
    stdout, stderr = p.communicate( input='\n'.join( builds ).encode( 'utf-8' ) )
    if p.returncode != 0:
      return 1
    sel = stdout.decode( 'utf-8' ).strip()
    if 'current' in sel:
      return 0
    os.remove( '.builds/current' )
    os.symlink( sel, '.builds/current', target_is_directory=True )
    print( 'new ', end='' )
    do_st()
    return 0

def do_rc():
    build_dir = os.path.basename( os.path.realpath( '.builds/current' ) )
    if build_dir == 'current':
        return 1
    os.chdir( '.builds/current' )
    if not os.path.exists( 'cmake-command.sh' ):
      print( '%s%serror%s: cached %s%scmake-command.sh%s not found.' % (bcolors.BOLD, bcolors.RED, bcolors.NORMAL, bcolors.BOLD, bcolors.YELLOW, bcolors.NORMAL) )
      return 1
    log_title( 'reconfiguring %s%s%s%s...' % (bcolors.BOLD, bcolors.GREEN, build_dir, bcolors.NORMAL) )
    cmd = ['bash', 'cmake-command.sh']
    if args.verbose:
        p = sp.Popen( cmd )
    else:
      with open( 'cmake-stdout.log', 'w' ) as f:
          p = sp.Popen( cmd, stdout=f )
    p.communicate()

    if p.returncode != 0:
        log_title( 'errors!' )
        # Use print here because we want this message to appear
        # even in non-verbose mode.
        print( 'Error while running CMake: for CMake\'s stdout see:\n\n    %s\n\nor rerun this script with -v.' % os.path.abspath( 'cmake-stdout.log' ) )

    return p.returncode

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Configure CMake Build' )

    parser.add_argument( dest='mode',
                         default='c',
                         nargs='?',
                         choices=['c', 'rc', 'st', 'ls', 'sel'],
                         help='Select mode' )
    parser.add_argument( '--release',
                         dest='release',
                         action='store_true',
                         help='Do a release build' )
    parser.add_argument( '-t', '--tidy',
                         dest='tidy',
                         action='store_true',
                         help='Whether to run clang-tidy' )
    parser.add_argument( '--emit-only',
                         dest='emit_only',
                         action='store_true',
                         help='Just emit the CMake command that would be run' )
    parser.add_argument( '--sdl-local',
                         dest='sdl_local',
                         action='store_true',
                         help='Use the SDL2 libraries in the ~dev/tools/sdl folder.' )
    parser.add_argument( '--generator',
                         dest='generator',
                         type=str,
                         default=None,
                         choices=['ninja', 'make'],
                         help='Choose the generator' )
    # parser.add_argument( '--iwyu',
    #                      dest='iwyu',
    #                      action='store_true',
    #                      help='Whether to run include-what-you-use' )
    parser.add_argument( '-v', '--verbose',
                         dest='verbose',
                         action='store_true',
                         help='Display verbose output from configure script itself' )
    parser.add_argument( '--testing',
                         dest='testing',
                         action='store_true',
                         help='Build tests and enable testing' )
    parser.add_argument( '--asan',
                         dest='asan',
                         action='store_true',
                         help='Enable address sanitizer instrumentation' )
    parser.add_argument( '--show-commands',
                         dest='show_commands',
                         action='store_true',
                         help='Show full commands during build' )
    parser.add_argument( '--clang',
                         dest='clang',
                         action='store_true',
                         help='Use clang' )
    parser.add_argument( '--trace',
                         dest='trace',
                         action='store_true',
                         help='Enable trace-level logging' )
    parser.add_argument( '--lld',
                         dest='lld',
                         action='store_true',
                         help='Use lld linker (must be using clang)' )
    parser.add_argument( '--lto',
                         dest='lto',
                         action='store_true',
                         help='Enable link-time optimizations (requires lld)' )
    parser.add_argument( '--libcxx',
                         dest='libcxx',
                         action='store_true',
                         help='Use clang\'s libc++ if it is not already the default on the system.' )
    parser.add_argument( '--libstdcxx',
                         dest='libstdcxx',
                         action='store_true',
                         help='If using either clang or gcc, can request to use libstdcxx.' )
    parser.add_argument( '--gcc',
                         dest='gcc',
                         const='current',
                         default=None,
                         action='store',
                         nargs='?',
                         type=str,
                         help='Use gcc and optionally specify path to a gcc home or gcc/g++ binary.  This can be `current` as well.' )
    parser.add_argument( '--gui',
                         dest='gui',
                         action='store_true',
                         help='Use CMake GUI' )
    parser.add_argument( '--no-color',
                         dest='no_color',
                         action='store_true',
                         help='No colors in output' )
    parser.add_argument( '--prefix',
                         dest='prefix',
                         type=str,
                         default=os.path.join( os.environ['HOME'], '.local' ),
                         help='Install prefix' )

    args = parser.parse_args()

    if args.mode == 'st':
        exit( do_st() )

    if args.mode == 'rc':
        exit( do_rc() )

    if args.mode == 'ls':
        exit( do_ls() )

    if args.mode == 'sel':
        exit( do_sel() )

    if args.no_color:
        for k,v in bcolors.__dict__.items():
            bcolors.__dict__[k] = ''

    if args.emit_only:
        assert not args.verbose, "Can't use --emit-only with --verbose"

    log_title( "initialization" )

    # root_dir = os.path.abspath( os.path.join( os.path.dirname( __file__ ), '..' ) )
    assert os.path.exists( 'CMakeLists.txt' ),\
            'This must be run in a folder with CMakeLists.txt'

    root_dir = os.getcwd()
    log( 'Changing to root directory: ' + root_dir )
    os.chdir( root_dir )

    if not os.path.isdir( '.builds' ):
        log( 'Creating .builds directory' )
        os.mkdir( '.builds' )
    log( 'Changing to .builds directory' )
    os.chdir( '.builds' )

    assert not (args.libstdcxx and args.libcxx), \
            'Cannot specify both --libcxx and --libstdcxx'

    if args.lto:
        assert args.lld, 'Must use --lld if using --lto'

    if args.lld:
        assert args.clang, 'Must use --clang if using --lld'

    if args.libcxx:
        assert args.clang, 'Must use --clang if using --libcxx'

    assert not (args.clang and args.gcc),\
           'Cannot specify both --clang and --gcc'

    log( 'args.gcc: %s' % args.gcc )

    if args.sdl_local:
        # If we have local SDL2 builds in the usual location then
        # we will set environment variables pointing to them.
        # These environment variables are read as hints by the
        # various FindSDL2* scripts. For some reason it appears
        # to us environment variables instead of cmake variables.
        log( 'using local SDL2 libraries.' )
        sdl = '%s/dev/tools/sdl' % os.environ['HOME']
        link = '%s/sdl-current' % sdl
        if os.path.exists( link ):
            log( 'using local SDL2.' )
            os.environ['SDL2DIR'] = link
        link = '%s/sdl-image-current' % sdl
        if os.path.exists( link ):
            log( 'using local SDL2_image.' )
            os.environ['SDL2IMAGEDIR'] = link
        link = '%s/sdl-mixer-current' % sdl
        if os.path.exists( link ):
            log( 'using local SDL2_mixer.' )
            os.environ['SDL2MIXERDIR'] = link
        link = '%s/sdl-ttf-current' % sdl
        if os.path.exists( link ):
            log( 'using local SDL2_ttf.' )
            os.environ['SDL2TTFDIR'] = link

    compiler_root = None # may not be needed

    # Whatever is put in this dictionary will be set in the
    # environment a) before cmake runs, and b) will be dumped
    # to a make file and set in the environment during the build.
    env_vars = {}

    if args.clang:
        compiler = 'clang'
        c_compiler_path = '%s/dev/tools/llvm-current/bin/clang' % os.environ['HOME']
        cxx_compiler_path = '%s/dev/tools/llvm-current/bin/clang++' % os.environ['HOME']
    elif args.gcc is not None:
        compiler = 'gcc'
        assert args.gcc, 'gcc cannot be empty!'
        if os.path.isfile( args.gcc ):
            real = os.path.realpath( args.gcc )
            log( 'Realpath to compiler: %s' % real )
            # User has specified a compiler binary.  Whether it is gcc or g++
            # (or some variant thereof) we can get the C and CXX compilers by
            # the following replacement.
            c_compiler_path = real.replace( '++', 'cc' )
            cxx_compiler_path = real.replace( 'cc', '++' )
            compiler_root = os.path.dirname( os.path.dirname( real ) )
        else:
            if args.gcc == 'current':
                compiler_root = '%s/dev/tools/gcc-current' % os.environ['HOME']
                bin = '%s/bin' % compiler_root
            else:
              # User has specified a folder.  Now we must find where the binary
              # is relative to this folder.
              compiler_root = args.gcc
              if os.path.basename( compiler_root ) == 'bin':
                compiler_root = os.path.dirname( compiler_root )
              bin = compiler_root
              if os.path.exists( '%s/bin' % compiler_root ):
                bin = '%s/bin' % compiler_root
            # At this point, compiler_root and bin should be set, and hopefully
            # the bin/ folder contains the compilers.
            gccs = [f for f in os.listdir( bin ) if re.match( '^gcc[0-9-]*$', f )]
            # This attempts to put the later versions first, assuming there are
            # multiple versions in the same folder and they have the version
            # numbers in their name.
            gccs = sorted( gccs, reverse=True )
            log( 'found gcc\'s: %s' % gccs )
            assert gccs, 'failed to find any gcc binaries under %s' % bin
            # Give priority to 'gcc' if it is present since it may be a symlink
            # to a versioned one.
            if 'gcc' in gccs:
              gcc = 'gcc'
            else:
              gcc = gccs[0]
            c_compiler_path = '%s/%s' % (bin, gcc)
            cxx_compiler_path = '%s/%s' % (bin, gcc.replace( 'cc', '++' ))
            if is_linux and 'gcc-current' in compiler_root:
                env_vars['LD_LIBRARY_PATH'] = '%s/lib' % compiler_root
    else:
        # Find the default compilers on the system
        c_name, c_compiler_path = default_c_compiler()
        cxx_name, cxx_compiler_path = default_cxx_compiler()
        assert c_name == cxx_name, 'C and C++ compilers must be of the same type'
        compiler = '%s-system' % c_name

    if not compiler_root:
      compiler_root = os.path.dirname( os.path.dirname( c_compiler_path ) )

    assert '++' in cxx_compiler_path, 'The cxx_compiler_path must have \'++\' ' \
        'in the name because some compilers are sensitive to the name (sometimes ' \
        'a symlink) with which they are called.'

    log( 'compiler_root: %s' % compiler_root )
    log( 'c_compiler_path: %s' % c_compiler_path )
    log( 'cxx_compiler_path: %s' % cxx_compiler_path )

    compiler_version = get_compiler_version( c_compiler_path )

    generator = None

    if args.generator:
        generator = args.generator
    else:
        generator = 'make'

    log( 'Using generator: %s' % generator )

    if generator == 'ninja':
        G = 'Ninja'
        gen_label = 'ninja'
    elif generator == 'make':
        G = 'Unix Makefiles'
        gen_label = 'make'
    else:
        raise Exception( 'invalid generator: %s' % generator )

    if args.libcxx:
        stdlib = 'libc++'
    elif args.libstdcxx:
        stdlib = 'libstdc++'
    else:
        # TODO: figure out which stdlib a compiler is using.
        stdlib = None

    build_type = 'debug' if not args.release else 'release'

    build_dir = platform_identifier( compiler=compiler,
                                     compiler_version=compiler_version,
                                     lld=args.lld,
                                     lto=args.lto,
                                     stdlib=stdlib,
                                     build_type=build_type,
                                     tidy=args.tidy,
                                     asan=args.asan,
                                     trace=args.trace )

    if os.path.exists( 'current' ):
        os.remove( 'current' )

    if not os.path.isdir( build_dir ):
        log( 'Creating "%s" directory' % build_dir )
        os.mkdir( build_dir )
    else:
        # Already exists, so just point the link to it and exit
        log( 'Build directory %s already exists, activating it.' % build_dir )
        os.symlink( build_dir, 'current', target_is_directory=True )
        print( '%s%sNOTE%s: Using cached `%s%s%s`; run `%s%scmc rc%s` (re-configure) to force a rerun of this configuration.'
                % (bcolors.BOLD, bcolors.YELLOW, bcolors.NORMAL, bcolors.GREEN, build_dir, bcolors.NORMAL, bcolors.BOLD, bcolors.PURPLE, bcolors.NORMAL) )
        exit( 0 )

    log( 'Changing to "%s" directory' % build_dir )
    os.chdir( build_dir )

    if os.path.exists( 'CMakeCache.txt' ):
        log( 'Removing CMakeCache.txt' )
        os.remove( 'CMakeCache.txt' )

    cmake_build_type = { 'debug': 'Debug', 'release': 'Release' }[build_type]
    log( 'Deduced CMake build type: ' + cmake_build_type )

    cmake_cxx_flags_init = []
    cmake_exe_linker_flags_init = []

    if build_type == 'debug' and 'gcc' not in compiler:
        cmake_cxx_flags_init.append( '-Wno-unused-command-line-argument' )

    if args.libstdcxx:
        gcc_current = '%s/dev/tools/gcc-current' % os.environ['HOME']
        log( 'Attempting to use libstdc++: %s' % gcc_current )
        (gcc_inc_home,) = glob( '%s/include/c++/*' % gcc_current )
        log( 'gcc_inc_home: %s' % gcc_inc_home )
        if glob( '%s/lib/libstdc++.*' % gcc_current ):
            lib = 'lib'
        elif glob( '%s/lib64/libstdc++.*' % gcc_current ):
            lib = 'lib64'
        else:
            raise Exception( 'Cannot find a lib directory under %s containing libstdc++' % gcc_current )
        gcc_lib_home = '%s/%s' % (gcc_current, lib)
        log( 'gcc_lib_home: %s' % gcc_lib_home )
        (gcc_inc_platform,) = glob( '%s/x86_64-*' % gcc_inc_home )
        log( 'gcc_inc_platform: %s' % gcc_inc_platform )
        cmake_cxx_flags_init.extend( ['-nostdinc++', '-I%s' % gcc_inc_home, '-I%s' % gcc_inc_platform] )
        if compiler == 'clang' and is_osx:
            cmake_cxx_flags_init.append( '-stdlib=libstdc++' )
        cmake_exe_linker_flags_init.extend( ['-Wl,-rpath,%s' % gcc_lib_home, '-L%s' % gcc_lib_home] )

    cmake_args = []
    cmake_args.append( '-G%s' % G )
    # -Wno-dev is to suppress cmake warnings that we are getting from
    # third party libraries (not ideal, but...).
    cmake_args.append( '-Wno-dev' )
    # cmake_args.append( '--warn-uninitialized' ) # third-party libs are bad with this
    cmake_args.append( '-DCMAKE_BUILD_TYPE=%s' % cmake_build_type )
    # cmake_args.append( '-DUSE_IWYU=%s' % cmake_bool( args.iwyu ) )
    cmake_args.append( '-DCMAKE_INSTALL_PREFIX=%s' % args.prefix )
    cmake_args.append( '-DCMAKE_C_COMPILER=%s' % c_compiler_path )
    cmake_args.append( '-DCMAKE_CXX_COMPILER=%s' % cxx_compiler_path )
    if args.tidy:
      cmake_args.append( '-DUSE_CLANG_TIDY=%s' % cmake_bool( True ) )
    if args.testing:
        cmake_args.append( '-DBUILD_TESTING=ON' )
    if gen_label == 'make':
        cmake_args.append( '-DCMAKE_TARGET_MESSAGES=OFF' )
    if args.show_commands:
        cmake_args.append( '-DCMAKE_VERBOSE_MAKEFILE=ON' )
    if args.asan:
        cmake_args.append( '-DENABLE_ADDRESS_SANITIZER=ON' )
    if args.libcxx:
        cmake_args.append( '-DUSE_LIBCXX=ON' )
        llvm_current = '%s/dev/tools/llvm-current' % os.environ['HOME']
        # See: https://libcxx.llvm.org/docs/UsingLibcxx.html
        cmake_cxx_flags_init.extend( ['-stdlib=libc++', '-I%s/include/c++/v1' % llvm_current] )
        cmake_exe_linker_flags_init.extend( ['-stdlib=libc++', '-lc++abi', '-L%s/lib' % llvm_current, '-Wl,-rpath,%s/lib' % llvm_current] )
    if args.lld:
      cmake_exe_linker_flags_init.append( '-fuse-ld=lld' )
    if args.lto:
      cmake_cxx_flags_init.append( '-flto' )
      cmake_exe_linker_flags_init.append( '-flto' )

    # This is for if we're using Ninja which will redirect the output
    # of the compilers, causing them to disable color diagnostics.  This
    # will tell the compiler to force color diagnostics.
    if 'clang' in compiler and generator == 'ninja':
      cmake_args.append( '-DCMAKE_C_FLAGS=-fcolor-diagnostics' )
    elif 'gcc' in compiler and generator == 'ninja':
      cmake_args.append( '-DCMAKE_C_FLAGS=-fdiagnostics-color' )
    if args.trace:
      cmake_args.append( '-DDEBUG_TRACE=ON' )

    # This should be last
    if cmake_cxx_flags_init:
      cmake_args.append( '-DCMAKE_CXX_FLAGS_INIT=%s' % ' '.join( cmake_cxx_flags_init ) )
    if cmake_exe_linker_flags_init:
      cmake_args.append( '-DCMAKE_EXE_LINKER_FLAGS_INIT=%s' % ' '.join( cmake_exe_linker_flags_init ) )

    exe = 'ccmake' if args.gui else 'cmake'
    cmd = [exe, '../..'] + cmake_args

    # Now gather up any environment variables that were requested
    # to be set.  These need to be set while we run CMake and also
    # later during the build.  So we export them now (from this
    # process) and also write them to a GNU-make file that can be
    # included during the build from a top-level Makefile.
    if env_vars:
        for k,v in env_vars.items():
            log( 'env: %s=%s' % (k,v) )
            os.environ[k] = v
        with open( 'env-vars.mk', 'w' ) as f:
            f.write( '# AUTO-GENERATED by `cmc`: DO NOT EDIT\n' )
            for k,v in env_vars.items():
                f.write( 'export %s = %s\n' % (k, v) )

    log_title( "cmake command" )
    log( ' '.join( cmd[:2] ) )
    for arg in cmd[2:]:
        log( '     ' + arg )

    log_title( 'configuring...' )

    # First write the CMake command to a file in the build
    # folder. We will use this later to reconfigure this mode
    # without the user having to reproduce the exact cmc command
    # line that was used originally.
    with open( 'cmake-command.sh', 'w' ) as f:
        for arg in cmd:
            f.write( '"%s" \\\n' % arg )

    if args.emit_only:
        # The complexity here is that we want to not only print backslashes
        # at the end of each line, but we want them to line up because we OCD.
        max_len = max( map( len, cmd[2:] ) ) + 2
        fmt_str = '    %%-%ds \\' % max_len
        fmt_str1 = '%%-%ds \\' % (max_len+4)
        print( fmt_str1 % ' '.join( cmd[:2] ) )
        for arg in cmd[2:]:
            print( fmt_str % ('"%s"' % arg) )
        exit( 0 )

    if args.verbose:
        p = sp.Popen( cmd )
    else:
        with open( 'cmake-stdout.log', 'w' ) as f:
            p = sp.Popen( cmd, stdout=f )
    p.communicate()

    if p.returncode != 0:
        log_title( 'errors!' )
        # Use print here because we want this message to appear
        # even in non-verbose mode.
        print( 'Error while running CMake: for CMake\'s stdout see:\n\n    %s\n\nor rerun this script with -v.' % os.path.abspath( 'cmake-stdout.log' ) )

    os.chdir( root_dir )
    if p.returncode == 0:
        if os.path.exists( '.builds/current' ):
            os.remove( '.builds/current' )
        os.symlink( build_dir, '.builds/current', target_is_directory=True )
        log_title( 'finished' )

    exit( p.returncode )
